Team GOAT: Ben Clarke, Ryan Liu, Evan Harrell
Final Report
	Although there a were a few changes for the overall project between the midterm report and final report, the Goatware project nevertheless ended up being a success. The Goatware malware did satisfy the main goal of copying and replacing files with goat-themed files of the same type. However, the process that the group took to get there was different than expected, which is completely normal when working on a subject such as this for the first time. 
This Goatware file, once downloaded, automatically starts up with the computer. The file will first make copies of all the user’s files, and place these copies into the Goatware file folder. Next, all of the user’s original files are changed to files of the same type, but are goat-themed. Next, a “ransom note” will be sent to the user, demanding a payment in return for the files (the malware wouldn’t actually return these files back to the user even if they paid this “ransom”). The malware will have a hidden presence, as it’s process name will be changed repeatedly. The malware itself is also a hidden folder, and only contains hidden folders. While the user is distracted by trying to find this hidden malware, a keylogger was simultaneously yet subtly launched at the start of the program. This keylogger has the ability to determine keys that the user pressed, held, and released, making it very possible for passwords, credit card info, etc. that the user types in to be stolen. Lastly, this project does implement network communication, as all information received from this Virtual Machine, including all the files, as well as the data received from the keylogger, will be sent to another IP address using socket programming. 
So inside the Goatware file folder, there are multiple different c files that will all be run automatically with the startup of the program. The main c file controls how all of these other c files are run. It handles creating the folder to store all the stolen files, sends a “ransom message” to the user, and controls all of the other c files. The first c file, automatic.c, will ensure that all processes inside the Goatware will from now on be run automatically when the Virtual Machine starts. Ryan can you explain more here when you finish this? A screenshot of this automatic startup is shown below. 

Next up is the c program changeFiles.c, which works exactly how it sounds, and includes a bit more. First, the original files are copied and sent to a directory controlled by the malware. This directory was created in the main c file. The program starts by identifying and going through each directory recursively. The program will use recursion if it identifies another directory, but if it identifies a file, will change the file, based on the type of file it is, and replace all of its information with something goat-related. An example is shown in the screenshot below:

 By using this recursive strategy, every file in the given directory should be compromised. The original files, meanwhile, are all placed in a folder controlled by the malware, which forces permission to access files inside this changeFiles.c file. 
The next file, renameProcess.c, changes the process name and PID every ten seconds in order to disguise its actual purpose from the user. It finds any other available process name, and copies this name over to Goatware’s process name using strcpy, as well as changing the PID by using changePID(). An example screenshot is displayed below. 

The next file, keylogger.c, takes the input gathered from the keyboard by using the device address of the keyboard. Next, a timer is set for 10 minutes, in which anything the user types will be placed into the file keyLoggerData.txt. The program is able to input what key is triggered, and whether it is being pressed, held or released. A screenshot is shown below of the implementation.

This file is sent with all the stolen files using network communication, which will be explained next in this report. 
For the network communication aspect of this project, two different c files are used: client.c and server.c. The client is whoever in this case are stealing the files of the original user. In the client file, socket programming is implemented in order to create the connection from the client to the server, which was also created in the client file. In this case, the client file requests a specific folder from the Virtual Machine, which is where the server file comes. In the server file, the server receives the request of the client, and transverses through all the files of the user VM to complete the client request. The server then sends all its findings to the client, who receives it in the client file. An example screenshot is shown below.
The main difference between the implementation of the project between the midterm and the final report was exactly how to steal the most important information from the user, such as passwords. At first, in the midterm report, it was said that the team would scan through its collected stolen files for important data. However, the immense difficulty of discovering this important information in specific files, if it even existed in the files, led to an alternative implementing choice. Instead, a keylogger was implemented, and this ended up being a great decision. A keylogger runs in the background, making it the perfect subtle aspect of our project, whose other goat-related aspects would distract the user from the most dangerous threat to discover important information. 
Each member contributed in numerous ways to make this project successful. Ben Clarke created the keylogger, and wrote the final report, as well as the “ransom” message in the project. Ryan Liu worked on the copying and  replacing  of user files. Ryan also worked on the automatic startup of the malware with the VM, as well as making its presence hidden/subtle by creating a method to constantly change the name and PID of the malware process. Evan Harrell completed the network communication aspect of the project  Although everyone had these specific tasks, the team was very open to helping each other out to create the best possible final product, which is very effective in causing malicious activity to a user. 

