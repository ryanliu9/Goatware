Team GOAT: Ben Clarke, Ryan Liu, Evan Harrell
Final Report
	Although there were a few changes for the overall project between the midterm report and final report, the Goatware project nevertheless ended up being a success. The Goatware malware did satisfy the main goal of copying and replacing files with goat-themed files of the same type. However, the process that the group took to get there was different than expected, which is completely normal when working on a subject such as this for the first time. 
First, all of the user’s original files are moved from the client machine to a server machine.  Next, all the original files are changed to files of the same type, but are goat-themed. The malware will have a hidden presence, as its process name will be changed repeatedly.  While the user is distracted by trying to find this malware and their files, a keylogger was simultaneously yet subtly launched at the start of the program. This keylogger has the ability to determine keys that the user pressed, held, and released, making it very possible for passwords, credit card info, etc. that the user types in to be stolen. Lastly, this project does implement network communication, as all information received from this Virtual Machine, including all the files, as well as the data received from the keylogger, will be sent to another IP address using socket programming. 
So inside the Goatware file folder, there are multiple different c files. The main c file controls how all of these other c files are run.  First up is the c program changeFiles.c, which works exactly how it sounds, and includes a bit more. First, the original files are sent to the client code to be copied to a separate specified server machine. The program starts by identifying and going through each directory recursively. The program will use recursion if it identifies another directory, but if it identifies a file, will change the file, based on the type of file it is, and replace all of its information with something goat-related.  By using this recursive strategy, every file in the given directory should be compromised.
The next file, renameProcess.c, changes the process name and PID every ten seconds in order to disguise its actual purpose from the user. It finds any other available process name, and copies this name over to Goatware’s process name using strcpy, as well as changing the PID by using changePID().
The next file, keylogger.c, takes the input gathered from the keyboard by using the device address of the keyboard.  Anything the user types will be placed into the file keyLoggerData.txt. The program is able to input what key is triggered, and whether it is being pressed, held or released.
This file is sent with all the stolen files using network communication, which will be explained next in this report. 
For the network communication aspect of this project, two different c files are used: client.c and server.c.  The server is whoever is attempting to steal files from the user and is hosted on a different machine, and specified by a specific IP address in both server.c and header.h.  The server waits for the malware to send the files via a client.  Client.c is used to create a client to connect to the server, and send a file’s name and contents to the server to copy before replacing the user’s original file.  Client’s method is called in changeFile.c just before the contents of the file are changed.
The main difference between the implementation of the project between the midterm and the final report was exactly how to steal the most important information from the user, such as passwords. At first, in the midterm report, it was said that the team would scan through its collected stolen files for important data. However, the immense difficulty of discovering this important information in specific files, if it even existed in the files, led to an alternative implementing choice. Instead, a keylogger was implemented, and this ended up being a great decision. A keylogger runs in the background, making it the perfect subtle aspect of our project, whose other goat-related aspects would distract the user from the most dangerous threat to discover important information. 
Each member contributed in numerous ways to make this project successful. Ben Clarke created the keylogger, created both the README instructions and the final report. Ryan Liu worked on the replacing of user files. Ryan also worked on making the malware’s presence hidden and subtle by creating a method to constantly change the name and PID of the malware process. Evan Harrell completed the network communication aspect of the project.  Although everyone had these specific tasks, the team was very open to helping each other out to create the best possible final product, which is very effective in causing malicious activity to a user. 
